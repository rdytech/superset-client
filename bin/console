#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require 'dotenv/load'
require "json"
require "faraday"
require 'faraday/multipart'
require "happi"
require "terminal-table"
require "yaml"
require "enumerate_it"
require "superset"
require "rollbar"

Dir["./lib/**/*.rb"].each { |f| require f }
# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

require "pry"

# if accessing multiple supeset host environments regularly you can optionally
# setup multiple env files, see ./doc/setting_up_personal_api_credentials.md for more info
if ENV['SUPERSET_ENVIRONMENT']
  env_file = ".env-#{ENV['SUPERSET_ENVIRONMENT']}"
  if File.exist?(env_file)
    Dotenv.overload(env_file)
    puts "ENV configuration loaded from from #{env_file}"
  else
    puts "Environment file #{env_file} not found"
    exit
  end
end


# Add the SUPERSET_ENVIRONMENT to the PRY prompt if it exists
if ENV['SUPERSET_ENVIRONMENT']
  Pry.config.prompt = Pry::Prompt.new('custom', 'Custom Pry prompt with suffix', [proc do |target_self, nest_level, pry|
    "[#{pry.input_ring.size}] (#{":#{nest_level}" unless nest_level.zero?}ENV:#{ENV['SUPERSET_ENVIRONMENT'].upcase})> "
  end,
  proc do |target_self, nest_level, pry|
    "[#{pry.input_ring.size}] (#{":#{nest_level}" unless nest_level.zero?}ENV:#{ENV['SUPERSET_ENVIRONMENT'].upcase})* "
  end])
end

unless ENV['SUPERSET_HOST'] && ENV['SUPERSET_API_USERNAME'] && ENV['SUPERSET_API_PASSWORD']
  puts "Missing environment variables.  Check your .env file"
  puts "All env vars are required for SUPERSET_HOST, SUPERSET_API_USERNAME, and SUPERSET_API_PASSWORD values"
  puts "Refer to ./doc/setting_up_personal_api_credentials.md for more info"
  exit
end

def list_classes(namespace)
  namespace.constants.each_with_object([]) do |constant, classes|
    const_value = namespace.const_get(constant)
    if const_value.is_a?(Class)
      classes << const_value
    elsif const_value.is_a?(Module)
      classes.concat(list_classes(const_value))
    end
  end
end

# general help to list all superset classes
def superset_class_list
  puts " ---- Listing Superset ruby client API Classes ----- "
  list_classes(Superset)
end
alias :sshelp :superset_class_list

puts "\n  >>> Welcome to the Superset Ruby API Client <<< \n\n"
puts "\n  >>> list all available classes with 'sshelp' <<< \n\n"
puts "Your accessible Superset Database connections are: Superset::Database::List.call"

Superset::Database::List.call

# Auto-logout functionality.  Can override default timeout by setting CONSOLE_TIMEOUT env var (in seconds)
TIMEOUT_SECONDS = ENV.fetch('CONSOLE_TIMEOUT', 1800).to_i # Default 30 minutes
@last_activity = Time.now

def reset_timeout
  @last_activity = Time.now
end

def check_timeout
  if Time.now - @last_activity > TIMEOUT_SECONDS
    puts "\n\n>>> Session timed out after #{TIMEOUT_SECONDS / 60} minutes of inactivity. Goodbye! <<<"
    exit(0)
  end
end

# Set up timeout checking
timeout_thread = Thread.new do
  loop do
    sleep 30 # Check every 30 seconds
    check_timeout
  end
end

# Hook into Pry to reset timeout on activity
Pry.config.hooks.add_hook(:before_eval, :reset_timeout) do
  reset_timeout
end

at_exit { timeout_thread.kill }

puts "\n>>> Auto-logout enabled: #{TIMEOUT_SECONDS / 60} minutes of inactivity will close the session <<<"

Pry.start(__FILE__)

